{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "trigger": [
          "message",
          "file_share",
          "app_mention"
        ],
        "channelId": {
          "__rl": true,
          "value": "C0959UCV8G4",
          "mode": "id"
        },
        "downloadFiles": true,
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "2b0bc8cb-055a-41f3-91bc-6ae336641244",
      "name": "Slack Trigger",
      "webhookId": "40473956-cc8b-4e0f-8b1d-9afc1baba996",
      "credentials": {
        "slackApi": {
          "id": "5Is3ITJ9CAkTtThG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "35738f45-9c12-4ebc-911d-d6794b7509b9",
                    "leftValue": "=={{$json[\"text\"]}}\n",
                    "rightValue": "analyze dataset",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ee93bfdd-4282-4dd6-98c4-ed7a1a73ed94",
                    "leftValue": "=={{$json[\"subtype\"]}}",
                    "rightValue": "file_share",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        500,
        0
      ],
      "id": "6054ac23-ddcd-4798-bac7-b86ef560b340",
      "name": "Switch"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C0959UCV8G4",
          "mode": "id"
        },
        "text": "Hi! Please upload your CSV file and the schema file (JSON or TXT). Iâ€™ll analyze them and get back to you with insights and graphs!",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        780,
        -80
      ],
      "id": "e4e1ec23-f9d3-4b66-9546-55ca89c20eef",
      "name": "Send a message",
      "webhookId": "a00240f8-d5e5-4fff-8ab5-d860cccb9c74",
      "alwaysOutputData": true,
      "credentials": {
        "slackApi": {
          "id": "5Is3ITJ9CAkTtThG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const files = $json.files || [];\n\nlet datasetFile = null;\nlet schemaFile = null;\n\nfor (const file of files) {\n  const name = file.name.toLowerCase();\n  if (file.filetype === 'csv' || name.endsWith('.csv')) {\n    datasetFile = {\n      fileType: 'csv',\n      fileName: file.name,\n      fileUrl: file.url_private_download,\n    };\n  } else if (\n    file.filetype === 'json' ||\n    file.filetype === 'txt' ||\n    name.endsWith('.json') ||\n    name.endsWith('.txt')\n  ) {\n    schemaFile = {\n      fileType: 'schema',\n      fileName: file.name,\n      fileUrl: file.url_private_download,\n    };\n  }\n}\n\nif (!datasetFile || !schemaFile) {\n  throw new Error('Both CSV and schema files must be uploaded together.');\n}\n\nreturn {\n  json: {\n    dataset: datasetFile,\n    schema: schemaFile,\n    channel: $json.channel,\n    user: $json.user,\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        160
      ],
      "id": "2d4b0f45-a2ff-444c-82f7-77c9fa980b59",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "={{ $json[\"dataset\"][\"fileUrl\"] }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "csv"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1440,
        -100
      ],
      "id": "6e18a375-ee3f-43b3-893f-5f1f77f1e3d5",
      "name": "HTTP Request",
      "credentials": {
        "slackApi": {
          "id": "5Is3ITJ9CAkTtThG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1660,
        -100
      ],
      "id": "295bd31c-024b-4bd6-b1de-e085982c5f4a",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://data-bot.up.railway.app/upload-csv",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "csv"
            },
            {
              "parameterType": "formBinaryData",
              "name": "schema_file",
              "inputDataFieldName": "schema"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1880,
        0
      ],
      "id": "87e58b24-0944-4ac1-8893-67bc56da9081",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C0959UCV8G4",
          "mode": "id"
        },
        "text": "={{$json.output}}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2820,
        -120
      ],
      "id": "018aa124-29af-4f43-95b5-9660a93fd094",
      "name": "Send a message1",
      "webhookId": "6120a24d-9ed0-4729-88e6-f27de48b12dd",
      "credentials": {
        "slackApi": {
          "id": "5Is3ITJ9CAkTtThG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json[\"schema\"][\"fileUrl\"] }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "schema"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1440,
        100
      ],
      "id": "4144cd50-b7bd-4eef-98d4-c84347deb877",
      "name": "HTTP Request2",
      "credentials": {
        "slackApi": {
          "id": "5Is3ITJ9CAkTtThG",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e257241b-2442-4ec2-8cdd-c5d9e6062919",
              "leftValue": "={{!$json.text?.toLowerCase().includes(\"analyze dataset\") &&\n$json.subtype !== \"file_share\" &&\n!$json.hasOwnProperty(\"bot_id\")\n}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1280,
        -560
      ],
      "id": "99dec76c-1fa7-4496-86dc-5c57ab993a66",
      "name": "If1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2480,
        240
      ],
      "id": "224eac8a-9d93-42d0-9562-ac5ef25054aa",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "F8I1WgJTQyCMB87u",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2440,
        -120
      ],
      "id": "c6545c09-b900-4fd2-911c-dab1c05c3dce",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "test"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2700,
        260
      ],
      "id": "d2416b8b-04fd-4432-a700-a407c2ac17e8",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\nreturn {\n  json: {\n    memory: {\n      eda: input[\"EDA report\"],\n      schema: input[\"schema\"],\n      summary: input[\"summary\"],\n      plots: input[\"plot_urls\"]\n    },\n    text: `You are a Slack AI Assistant that helps users understand datasets.\n      \nYou have access to the following:\n- Dataset summary\n- Schema\n- EDA report\n- Plot image URLs\n\nDo not ask for the dataset again. Respond using this information.\n\nHereâ€™s the summary:\n${input[\"summary\"]}\n\nKey Observations:\n${input[\"EDA report\"]}\n\nSchema:\n${input[\"schema\"]}\n\nUse the plot links below where helpful:\n${input[\"plot_urls\"].join(\", \")}\n\nNow generate a Slack-friendly response summarizing key trends.`\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2140,
        0
      ],
      "id": "06725ab4-2e2f-4af6-a403-072a6f3147c6",
      "name": "Code3"
    }
  ],
  "pinData": {},
  "connections": {
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Send a message1": {
      "main": [
        []
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "dedb326f-cf97-4b80-af39-f53f38cb33a5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "83fa8c3623289c86555a413b240642a0d19d5dfe63b88cd998c709433c5fa3bc"
  },
  "id": "5JuSWcPYTyOaGSaE",
  "tags": []
}